# -*- coding: utf-8 -*-
"""bonus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1njB_j12HRfdmHjDbvhCUg-yEGa9FEmqI
"""

lowercase = {'a':0, 'b':1, 'c':2, 'd':3, 'e':4, 'f':5, 'g':6, 'h':7, 'i':8,
         'j':9, 'k':10, 'l':11, 'm':12, 'n':13, 'o':14, 'p':15, 'q':16,
         'r':17, 's':18,  't':19, 'u':20, 'v':21, 'w':22, 'x':23, 'y':24,
         'z':25}

uppercase ={'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7, 'I':8,
         'J':9, 'K':10, 'L':11, 'M':12, 'N':13, 'O':14, 'P':15, 'Q':16,
         'R':17, 'S':18,  'T':19, 'U':20, 'V':21, 'W':22, 'X':23, 'Y':24,
         'Z':25}

inv_lowercase = {0:'a', 1:'b', 2:'c', 3:'d', 4:'e', 5:'f', 6:'g', 7:'h', 8:'i',
         9:'j', 10:'k', 11:'l', 12:'m', 13:'n', 14:'o', 15:'p', 16:'q',
         17:'r', 18:'s', 19:'t', 20:'u', 21:'v', 22:'w', 23:'x', 24:'y',
         25:'z'}

inv_uppercase = {0:'A', 1:'B', 2:'C', 3:'D', 4:'E', 5:'F', 6:'G', 7:'H',
                 8:'I', 9:'J', 10:'K', 11:'L', 12:'M', 13:'N', 14:'O', 15:'P',
                 16:'Q', 17:'R', 18:'S', 19:'T', 20:'U', 21:'V', 22:'W', 23:'X',
                 24:'Y', 25:'Z'}

def countLetters(ciphertext):
  letter_count = {'A':0, 'B':0, 'C':0, 'D':0, 'E':0, 'F':0, 'G':0, 'H':0, 'I':0,
         'J':0, 'K':0, 'L':0, 'M':0, 'N':0, 'O':0, 'P':0, 'Q':0,
         'R':0, 'S':0,  'T':0, 'U':0, 'V':0, 'W':0, 'X':0, 'Y':0, 'Z':0}
  ciphertext = ciphertext.upper()
  for idx in range(0, len(ciphertext)):
    if ciphertext[idx].isalpha():
      letter_count[ciphertext[idx]] += 1
  return letter_count

def subciphertext_constructor(ciphertext, groupingNum):
  subciphertext_list = []
  for i in range(groupingNum):
    subciphertext_list.append("")
  idx = 0
  counter = 0
  while idx < len(ciphertext):
    if ciphertext[idx].isalpha():
      subciphertextpos = counter % groupingNum
      subciphertext_list[subciphertextpos] += ciphertext[idx]
      counter +=1
    idx +=1
  return subciphertext_list

def omit_nonalphabetic(ciphertext):
  char_list = []
  for idx in range(len(ciphertext)):
    if ciphertext[idx].isalpha():
      char_list.append(ciphertext[idx])
  return char_list

def shift_coincidence(ciphertext):
  shift_coincidence_dict = {}
  for shift in range(1,14):
    coincidence = 0
    for idx in range(len(ciphertext) - shift):
      if ciphertext[idx] == ciphertext[idx + shift]:
        coincidence += 1
    shift_coincidence_dict[shift] = coincidence

  return shift_coincidence_dict

ciphertext = "Fwg atax: P’tx oh li hvabawl jwgvmjs, nw fw tfiapqz lziym,\nrqgv uuwfpxj wpbk jxlnlz fptf noqe wgw.\nQoifmowl P bdg mg xv qe ntlyk ba bnjh vcf ekghn\nizl fq blidb eayz jgzbwx sqwm lgglbtqgy xlip.\nPho fvvs ktf C smf ur ecul ywndxlz uv mzcz xxivw\nQomdmowl P bgzg, oblzqdxj C swas,\nB kyl btm udujs dcbfm vn yg eazl, pqzx,\noblzq Q’ow mwmzb lg ghvk gxslz, emamwx apqu, wwmazagxv nomy bhlustk.\nGhm qvv’f nbfx h vqe vgoubdg, pgh’a nuvw shvbtmk kbvzq.\nBaam jqfg pafs ixetqm wcdanw svc.\nKwn’df dixs mzy ziym llllmfa, zjid wxl\nbf nom eifw hlqspuglowall, loyv sztq cu btmlw mhuq phmmla.\nKwn’df htiirk yul gx bf noqe kbls. Kwz’b agjl naz mzcuoe mekydpqzx:\nlblzq’a gg moqb nhj svc, fpxjy’z va zhsx.\nUwi basn fwg’dx ouzbql rgoy tunx zyym, uv mzcz ayied wvzzmk,\nqib’dq lxknywkmw an ldqzroblzq qg lbl eazev."
char_list = omit_nonalphabetic(ciphertext)

shift_coincidence_dict = shift_coincidence(char_list)

for shift_amount in shift_coincidence_dict:
  if shift_coincidence_dict[shift_amount] == max(shift_coincidence_dict.values()):
    possibleKeyLength = shift_amount

subciphertext_list = subciphertext_constructor(ciphertext, possibleKeyLength)  

letterCounts_forSubCiphertexts = []
frequent_lettersDict = {}

#this loop creates a list of dictionaries, where we have the letters as keys 
#and repetition times as values in the dictionary. We have 7 such dictionaries,
#which is the keylength 
count = 1
for eachList in subciphertext_list:
  letter_countList = countLetters(eachList)
  letterCounts_forSubCiphertexts.append(letter_countList)
  print(letter_countList)
  frequent_list = []
  for dictkey in letter_countList:
    if letter_countList[dictkey] == max(letter_countList.values()):
      frequent_in_ctext = dictkey
      frequent_list.append(frequent_in_ctext)
    frequent_lettersDict[count] = frequent_list
  count +=1

print(frequent_lettersDict)

def decipher(ciphertext, keyVector):
  plaintext = ""
  counter = 0
  for i in range(len(ciphertext)):
    if ciphertext[i].isalpha():
      shift_amount = keyVector[counter % len(keyVector)]
      if ciphertext[i] in uppercase:
        plaintext += inv_uppercase[(uppercase[ciphertext[i]] - shift_amount) % 26]
      else:
        plaintext += inv_lowercase[(lowercase[ciphertext[i]] - shift_amount) % 26]
      counter += 1
    else:
      plaintext += ciphertext[i]
  return plaintext


key = "HIMITSU"
keyVector = [7,8,12,8,19,18,20]
ciphertext = "Fwg atax: P’tx oh li hvabawl jwgvmjs, nw fw tfiapqz lziym,\nrqgv uuwfpxj wpbk jxlnlz fptf noqe wgw.\nQoifmowl P bdg mg xv qe ntlyk ba bnjh vcf ekghn\nizl fq blidb eayz jgzbwx sqwm lgglbtqgy xlip.\nPho fvvs ktf C smf ur ecul ywndxlz uv mzcz xxivw\nQomdmowl P bgzg, oblzqdxj C swas,\nB kyl btm udujs dcbfm vn yg eazl, pqzx,\noblzq Q’ow mwmzb lg ghvk gxslz, emamwx apqu, wwmazagxv nomy bhlustk.\nGhm qvv’f nbfx h vqe vgoubdg, pgh’a nuvw shvbtmk kbvzq.\nBaam jqfg pafs ixetqm wcdanw svc.\nKwn’df dixs mzy ziym llllmfa, zjid wxl\nbf nom eifw hlqspuglowall, loyv sztq cu btmlw mhuq phmmla.\nKwn’df htiirk yul gx bf noqe kbls. Kwz’b agjl naz mzcuoe mekydpqzx:\nlblzq’a gg moqb nhj svc, fpxjy’z va zhsx.\nUwi basn fwg’dx ouzbql rgoy tunx zyym, uv mzcz ayied wvzzmk,\nqib’dq lxknywkmw an ldqzroblzq qg lbl eazev."

decryptedText = decipher(ciphertext, keyVector)
print(decryptedText)