# -*- coding: utf-8 -*-
"""q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rVx3EOCPi1LqaUT0ZdXumD5TuG8cajVy
"""

import math
import random
import fractions

def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
    gcd = b
    return gcd, x, y

def modinv(a, m):
    if a < 0:
        a = m+a
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None  # modular inverse does not exist
    else:
        return x % m

def find_solutions(a,b,n):
  solutions = []
  if math.gcd(a,n) == 1:
    solution = (b * modinv(a,n)) % n
    solutions.append(solution)
    return solutions
  else:
    d = math.gcd(a,n)
    if b % d != 0:
      return solutions
    else:
      a = a // d
      b = b // d
      n = n // d
      base_solution = (b * modinv(a,n)) % n
      track = 0
      while track < d:
        solutions.append(base_solution)
        base_solution += n
        track += 1
      return solutions

solutions = find_solutions(74945727802091171826938590498744274413   , 54949907590247169540755431623509626593      , 97289040915427312142046186233204893375   )
print(solutions)